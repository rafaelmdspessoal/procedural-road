//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystem/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Idle"",
            ""id"": ""b96987ba-f206-488e-93c5-7d9e0ef9c05a"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""f2bf5d60-bb56-4ed7-b4af-99b902d1c259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdc7598a-7435-4deb-9716-f067ade03329"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Destroying"",
            ""id"": ""e7b777a5-8776-4887-a65f-ce6b1cbd0db4"",
            ""actions"": [
                {
                    ""name"": ""Demolish"",
                    ""type"": ""Button"",
                    ""id"": ""f48b5d97-8223-4b13-a34a-a71b1ed2a150"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb2e952b-6d23-4e00-ab53-a385379337eb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Demolish"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildingRoad"",
            ""id"": ""57e63f8c-f288-4fa3-978c-6fa9d82069da"",
            ""actions"": [
                {
                    ""name"": ""PlaceNode"",
                    ""type"": ""Button"",
                    ""id"": ""d084e834-7fc1-448a-b83a-df4db07ee93e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""22086194-ee6e-4b3b-a9ff-b50484c167b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c096338-e8fa-478e-82ac-34d36b34b559"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceNode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aad0486-c7fb-4138-8c79-fc6cb27f48a7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""c0d53f4a-960a-4419-8bb0-c6b9305d01c4"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""39ff8655-62da-41f1-a091-8770c96b9298"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66f33d60-56c7-4e44-859b-8dbfb301aaab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Idle
        m_Idle = asset.FindActionMap("Idle", throwIfNotFound: true);
        m_Idle_Select = m_Idle.FindAction("Select", throwIfNotFound: true);
        // Destroying
        m_Destroying = asset.FindActionMap("Destroying", throwIfNotFound: true);
        m_Destroying_Demolish = m_Destroying.FindAction("Demolish", throwIfNotFound: true);
        // BuildingRoad
        m_BuildingRoad = asset.FindActionMap("BuildingRoad", throwIfNotFound: true);
        m_BuildingRoad_PlaceNode = m_BuildingRoad.FindAction("PlaceNode", throwIfNotFound: true);
        m_BuildingRoad_Cancel = m_BuildingRoad.FindAction("Cancel", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Escape = m_General.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Idle
    private readonly InputActionMap m_Idle;
    private IIdleActions m_IdleActionsCallbackInterface;
    private readonly InputAction m_Idle_Select;
    public struct IdleActions
    {
        private @GameInputActions m_Wrapper;
        public IdleActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Idle_Select;
        public InputActionMap Get() { return m_Wrapper.m_Idle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IdleActions set) { return set.Get(); }
        public void SetCallbacks(IIdleActions instance)
        {
            if (m_Wrapper.m_IdleActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_IdleActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_IdleActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_IdleActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_IdleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public IdleActions @Idle => new IdleActions(this);

    // Destroying
    private readonly InputActionMap m_Destroying;
    private IDestroyingActions m_DestroyingActionsCallbackInterface;
    private readonly InputAction m_Destroying_Demolish;
    public struct DestroyingActions
    {
        private @GameInputActions m_Wrapper;
        public DestroyingActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Demolish => m_Wrapper.m_Destroying_Demolish;
        public InputActionMap Get() { return m_Wrapper.m_Destroying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DestroyingActions set) { return set.Get(); }
        public void SetCallbacks(IDestroyingActions instance)
        {
            if (m_Wrapper.m_DestroyingActionsCallbackInterface != null)
            {
                @Demolish.started -= m_Wrapper.m_DestroyingActionsCallbackInterface.OnDemolish;
                @Demolish.performed -= m_Wrapper.m_DestroyingActionsCallbackInterface.OnDemolish;
                @Demolish.canceled -= m_Wrapper.m_DestroyingActionsCallbackInterface.OnDemolish;
            }
            m_Wrapper.m_DestroyingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Demolish.started += instance.OnDemolish;
                @Demolish.performed += instance.OnDemolish;
                @Demolish.canceled += instance.OnDemolish;
            }
        }
    }
    public DestroyingActions @Destroying => new DestroyingActions(this);

    // BuildingRoad
    private readonly InputActionMap m_BuildingRoad;
    private IBuildingRoadActions m_BuildingRoadActionsCallbackInterface;
    private readonly InputAction m_BuildingRoad_PlaceNode;
    private readonly InputAction m_BuildingRoad_Cancel;
    public struct BuildingRoadActions
    {
        private @GameInputActions m_Wrapper;
        public BuildingRoadActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceNode => m_Wrapper.m_BuildingRoad_PlaceNode;
        public InputAction @Cancel => m_Wrapper.m_BuildingRoad_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_BuildingRoad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingRoadActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingRoadActions instance)
        {
            if (m_Wrapper.m_BuildingRoadActionsCallbackInterface != null)
            {
                @PlaceNode.started -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnPlaceNode;
                @PlaceNode.performed -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnPlaceNode;
                @PlaceNode.canceled -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnPlaceNode;
                @Cancel.started -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_BuildingRoadActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_BuildingRoadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceNode.started += instance.OnPlaceNode;
                @PlaceNode.performed += instance.OnPlaceNode;
                @PlaceNode.canceled += instance.OnPlaceNode;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public BuildingRoadActions @BuildingRoad => new BuildingRoadActions(this);

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_Escape;
    public struct GeneralActions
    {
        private @GameInputActions m_Wrapper;
        public GeneralActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_General_Escape;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);
    public interface IIdleActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IDestroyingActions
    {
        void OnDemolish(InputAction.CallbackContext context);
    }
    public interface IBuildingRoadActions
    {
        void OnPlaceNode(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
}
